name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    environment: ci
    types:
      - published

jobs:
  docs:
    name: Build & Test Docusaurus Docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: docs/package-lock.json

      - name: Install Dependencies
        working-directory: docs
        run: npm ci

      - name: Build Docs
        working-directory: docs
        run: npm run build

      - name: Lint Docs
        working-directory: docs
        run: npm run lint

      - name: Run Tests
        working-directory: docs
        run: npm test

  cargo:
    name: SystemG CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install Cargo Tools
        run: |
          cargo install cargo-sort
          rustup component add rustfmt clippy

      - name: Check Cargo.toml Formatting (cargo-sort)
        run: cargo sort --check --workspace

      - name: Run Clippy (Linting)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rustfmt (Code Formatting)
        run: cargo fmt -- --check

      - name: Check rustfmt.toml Formatting
        run: test -f rustfmt.toml || { echo "rustfmt.toml not found"; exit 1; }

      - name: Run Tests
        run: cargo test --verbose --features linux

  release:
    name: Upload Release Binaries
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: systemg-linux.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: systemg-macos.tar.gz
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Compress Binary
        run: |
          tar -czvf ${{ matrix.artifact }} -C target/${{ matrix.target }}/release systemg

      - name: Upload Binary to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.artifact }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install s3cmd
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update && sudo apt-get install -y s3cmd
          else
            brew install s3cmd
          fi

      - name: Configure s3cmd for R2
        run: |
          cat > ~/.s3cfg <<EOF
          [default]
          access_key = ${{ secrets.R2_ACCESS_KEY_ID }}
          secret_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
          host_base = ${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
          host_bucket = ${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
          use_https = True
          EOF

      - name: Upload to Cloudflare R2
        run: |
          s3cmd put ${{ matrix.artifact }} s3://${{ secrets.R2_BUCKET_NAME }}/${{ matrix.artifact }} --acl-public
